{"version":3,"sources":["components/Work.jsx","components/Break.jsx","components/Countdown.jsx","App.js","serviceWorker.js","index.js"],"names":["Work","workTime","lowerWorkTimeByOneMinute","raiseWorkTimeByOneMinute","workTimeInMinutes","moment","duration","asMinutes","id","onClick","Break","breakTime","lowerBreakTimeByOneMinute","raiseBreakTimeByOneMinute","breakTimeInMinutes","momentDurationFormatSetup","Countdown","handleStartStopClick","timerLabel","countdown","startStopButtonLabel","formattedCountdown","format","trim","App","audioElement","useRef","useState","currentTimerType","setCurrentTimerType","intervalId","setIntervalId","setWorkTime","setBreakTime","setCountdown","useEffect","isStarted","current","play","className","newWorkTime","clearInterval","newIntervalId","setInterval","prevCountdown","load","newBreakTime","ref","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8bd9174e.chunk.js","sourcesContent":["import React from \"react\";\nimport moment from \"moment\";\n\nconst Work = ({\n  workTime,\n  lowerWorkTimeByOneMinute,\n  raiseWorkTimeByOneMinute,\n}) => {\n  const workTimeInMinutes = moment.duration(workTime, \"s\").asMinutes();\n\n  return (\n    <div>\n      <p id=\"work-label\">Work</p>\n      <p id=\"work-time\">{workTimeInMinutes}</p>\n      <button id=\"work-lower\" onClick={lowerWorkTimeByOneMinute}>\n        -\n      </button>\n      <button id=\"work-raise\" onClick={raiseWorkTimeByOneMinute}>\n        +\n      </button>\n    </div>\n  );\n};\n\nexport default Work;\n","import React from \"react\";\nimport moment from \"moment\";\n\nconst Break = ({\n  breakTime,\n  lowerBreakTimeByOneMinute,\n  raiseBreakTimeByOneMinute,\n}) => {\n  const breakTimeInMinutes = moment.duration(breakTime, \"s\").asMinutes();\n\n  return (\n    <div>\n      <p id=\"break-label\">Break</p>\n      <p id=\"break-time\">{breakTimeInMinutes}</p>\n      <button id=\"break-lower\" onClick={lowerBreakTimeByOneMinute}>\n        -\n      </button>\n      <button id=\"break-raise\" onClick={raiseBreakTimeByOneMinute}>\n        +\n      </button>\n    </div>\n  );\n};\n\nexport default Break;\n","import React, { useState } from \"react\";\nimport moment from \"moment\";\nimport momentDurationFormatSetup from \"moment-duration-format\";\n\nmomentDurationFormatSetup(moment);\n\nconst Countdown = ({\n  handleStartStopClick,\n  timerLabel,\n  countdown,\n  startStopButtonLabel,\n}) => {\n  const formattedCountdown = moment\n    .duration(countdown, \"s\")\n    .format(\"mm:ss\", { trim: false });\n  return (\n    <div>\n      <p id=\"timer-label\">{timerLabel}</p>\n      <p>{formattedCountdown}</p>\n\n      <button onClick={handleStartStopClick}>{startStopButtonLabel}</button>\n    </div>\n  );\n};\n\nexport default Countdown;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Work from './components/Work'\nimport Break from './components/Break'\nimport Countdown from './components/Countdown'\nimport './App.css';\n\nfunction App() {\n  const audioElement = useRef(null);\n  const [currentTimerType, setCurrentTimerType] = useState(\"Work\");\n  const [intervalId, setIntervalId] = useState(null);\n  const [workTime, setWorkTime] = useState(60 * 25); // time in seconds\n  const [breakTime, setBreakTime] = useState(300);\n  const [countdown, setCountdown] = useState(workTime);\n\n  // Change countdown when workTime changes\n  useEffect(() => {\n    setCountdown(workTime);\n  }, [workTime]);\n\n  const lowerWorkTimeByOneMinute = () => {\n    const newWorkTime = workTime - 60;\n\n    if (newWorkTime < 0) {\n      setWorkTime(0);\n    } else if (newWorkTime === 0) {\n      return\n    } else {\n      setWorkTime(newWorkTime);\n    }\n  };\n\n  const raiseWorkTimeByOneMinute = () => {\n    const newWorkTime = workTime + 60\n    if (newWorkTime <= 60 * 60) {\n      setWorkTime(newWorkTime)\n    }\n  };\n\n  const isStarted = intervalId != null;\n\n  // if countdown is zero, change work to break or break to work\n  useEffect(() => {\n    if (countdown === 0) {\n      audioElement.current.play()\n      if (currentTimerType === \"Work\") {\n        setCurrentTimerType(\"Break\");\n        setCountdown(breakTime);\n      } else if (currentTimerType === \"Break\") {\n        setCurrentTimerType(\"Work\");\n        setCountdown(workTime);\n      }\n    }\n  }, [breakTime, currentTimerType, workTime, countdown]);\n\n  const handleStartStopClick = () => {\n    if (isStarted) {\n      // if timer is started\n      // we want to stop and clear\n      clearInterval(intervalId);\n      setCountdown(workTime);\n      setCurrentTimerType(\"Work\");\n      setIntervalId(null);\n    } else {\n      // if timer is stopped:\n      // lower countdown for each second\n      // 1000 ms is 1 second\n      const newIntervalId = setInterval(() => {\n        setCountdown(prevCountdown => prevCountdown - 1);\n        //   const newCountdown = prevCountdown - 1;\n        //   if (newCountdown >= 0) {\n        //     return newCountdown;\n        //   }\n\n        //   // if work, switch to break\n        //   if (currentTimerType === \"Work\") {\n        //     setCurrentTimerType(\"Break\");\n        //     // set countdown to breakTime\n        //     return breakTime;\n        //   }\n\n        //   // if break, switch to work\n        //   else if (currentTimerType === \"Break\") {\n        //     setCurrentTimerType(\"Work\");\n        //     // set countdown to breakTime\n        //     setCountdown(workTime);\n        //   }\n        //   // set countdown to workTime\n        //   return prevCountdown;\n        // });\n      }, 100); // TODO reset to 1000\n      setIntervalId(newIntervalId);\n    }\n  };\n\n  const handleResetButtonClick = () => {\n    // reset audio\n    audioElement.current.load()\n    // clear the countdown interval\n    clearInterval(intervalId)\n    // set the intervalId null\n    setIntervalId(null)\n    // set the timertype to \"Work\"\n    setCurrentTimerType('Work')\n    // reset the workTime to 25 minutes\n    setWorkTime(25 * 60)\n    // reset the breakTime to 5\n    setBreakTime(60 * 5)\n    // reset the timer to 25 minutes (initial workTime)\n    setCountdown(25 * 60)\n  }\n\n  const lowerBreakTimeByOneMinute = () => {\n    const newBreakTime = breakTime - 60;\n    if (newBreakTime < 0) {\n      setBreakTime(0);\n    } else if (newBreakTime === 0) {\n      return\n    } else {\n      setBreakTime(newBreakTime);\n    }\n  };\n\n  const raiseBreakTimeByOneMinute = () => {\n    const newBreakTime = breakTime + 60\n    if (newBreakTime <= 60 * 60) {\n      setBreakTime(newBreakTime)\n    }\n  };\n\n\n  return (\n    <div className=\"App\">\n\n      <Work\n        workTime={workTime}\n        lowerWorkTimeByOneMinute={lowerWorkTimeByOneMinute}\n        raiseWorkTimeByOneMinute={raiseWorkTimeByOneMinute}\n      />\n      <Countdown\n        workTime={workTime}\n        breakTime={breakTime}\n        timerLabel={currentTimerType}\n        handleStartStopClick={handleStartStopClick}\n        startStopButtonLabel={isStarted ? \"Stop\" : \"Start\"}\n        countdown={countdown}\n      />\n      <p>\n        <button id=\"reset\" onClick={handleResetButtonClick}>Reset</button>\n      </p>\n      <Break\n        breakTime={breakTime}\n        lowerBreakTimeByOneMinute={lowerBreakTimeByOneMinute}\n        raiseBreakTimeByOneMinute={raiseBreakTimeByOneMinute}\n      />\n\n      <audio id=\"alarm\" ref={audioElement}>\n        <source src=\"https://www.soundjay.com/misc/sounds/magic-chime-01.mp3\" />\n      </audio>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}